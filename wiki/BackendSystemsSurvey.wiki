#summary TODO: Survey of options for back-end storage

= Introduction =

See also: [RequirementsAndGoals]

Required:
 * simple REST interface
 * saved data available as RDF using simple HTTP request
 * off-the-shelf (no new code required)
 * arbitrary binary object storage and web access (images, etc.)
 * available for local *or* service deployment

Desired:
 * easy integration with University SSO
 * standard, replaceable API

= Caboto =

Provides back-end service for annotations.  At first seems very similar to Shuffl requirements, but on discussion with Damian Steer, I think it's probably too much skewed to annotations, and not really providing general RDF object storage suitable for Shuffl.

= Databank =

 * http://databank.ouls.ox.ac.uk

SVN repositories?  hmm- I can't find the software

See also:
 * http://www.rabbitmq.com/
 * http://www.amqp.org/

Question:
Open source?

Another project from Ben O'Steen: 
 * http://oxfordrepo.blogspot.com/2009/05/rdf-ui-fedora-for-object-metadata-rdf.html
there's some cool jQuery stuff here to be used.

I quote:

<blockquote>
For the Web UI:

Using jQuery and 3 plugins: jEditable, autocomplete and rdfquery.

 * jeditable: http://www.appelsiini.net/projects/jeditable
 * jeditable live demo: http://www.appelsiini.net/projects/jeditable/default.html <-- see this to understand what it gives.
 * http://jquery.bassistance.de/autocomplete/demo/ <-- example autocomplete demo
 * http://code.google.com/p/rdfquery/ from jeni tennison for reading RDFa information from the DOM of an HTML page using javascript.

Needed middleware controls from the Web App:
 * create new session (specifically, a delta of the RDF expressed in iand's ChangeSet schema  
 * http://vocab.org/changeset/schema ) POST /{object-id}/{RDF}/session/new -> HTTP 201 - session url (includes object id root)
 * POST triples to /{session-url}/update to add to the 'add' and/or 'delete' portions
 * A POST to /{session-url}/commit or just DELETE /{session-url}

And all objects typed by rdf:type (multitypes allowed)
</blockquote>


= Talis platform =

 * http://www.talis.com/platform/

Talis Platform ticks most of the boxes here.  My main reservation is that it's a service-only offering, so research groups don't have the option of using a local server.  Why might they want to do that?  I don't know, but I don't want to impose the choice on them.

Also, integration with a university SSO might be problematic.

I think the API is a Talis design - I don't know if they have any more standard interfaces.


= GetDropBox =

= AtomPub options (Exist?) =

= WebDAV =

= JCR / Jackrabbit / In...? ... WebDAV / DeltaV implementation (http://jackrabbit.apache.org/) =

Implements WebDAV/DeltaV

= Google data APIs =

* AtomPub-derived

= Note from Alistair Miles =

Also, I thought I'd mention that I've been looking at the atom
publishing protocol. I also found that the eXist XML database supports
atompub out of the box^1^. I deployed eXist 1.2 as a war to tomcat,
and I had an atom server running with no coding or configuration. You
can then store/update/delete what is effectively arbitrary XML
content. It might be a quick option for you to get up and running with
your shuffl demo -- you could design a simple XML format for the card
data based on the atom syndication format, use atompub as the protocol
for managing the data, and use an OTS atom server for implementation.

As an aside, I also note that the google data apis ^2^ are all based
on extensions to atompub. I haven't looked at them in detail, but
might provide some best practice on how to extend atompub.

 # http://exist.sourceforge.net/atompub.html
 # http://code.google.com/apis/gdata/