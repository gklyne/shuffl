#summary Card_Views_Data_Testing: refactoring card plugins around an MVC pattern

= Introduction =

At the point of having implemented two card types (and received the Wookie contribution), I am aware that card functionality is not always easy to unit-test, and that I need to develop an interface that supports linkage between cards (for collections, etc.).

= MVC pattern =

I propose to address this by adopting a version of the Model-View-Controller (MVC) pattern for card plugins, following a design that was developed by Alistair Miles for the !FlyWeb project.  Essentially, all external interactions take place vie a control interface which updates the card state (Model), all updates to the card display (view) are enacted via subscription to associated model values, and all user interactions are effected via calls to the controller interface.  In this way, all interactions can be simulated through the controller interface, and the resu7lting changes observed in both the model and the DOM.

It all looks something like this:
{{{
Initialization     External events <--+
 | (call)           |                 |
 |                  |                 |
 |<-----------------+                 |
 |       (subscribe)                  |
 |                          (publish) |
 |            +-->--------------------+
 |            |
 +--> Controller <--------------------------------------+ 
       |                                    (subscribe) |
       | (call)                                         |
       +--> Model                                       |
             |                                          |
             | (subscribe)                              |
             +--> Renderer                              |
                   |                                    |
                   | (call)                             |
                   +--> DOM                             |
                         |                              |
                         +--> user input collector -->--+
}}}

= Model =

Shuffl and card plug-ins use the jQuery(...).data() method to store card-related data, and this seems an appropriate basis for the card model. This can be implemented as a jQuery plugin that attaches appropriate functionality to any page element.  The interface would look like this:

 *  jQuery(...).model("name", value) - set a value in the model, and trigger any listeners subscribed to that value.
 *  jQuery(...).model("name", value) - retrieve a value from the model.
 *  jQuery(...).modelSubscribe("name", function) - subscribe a listener to changes in a model value, and return a value that can be used for subsequently removing the subscription.

The listener function is called thus, with {{{this}}} referencing the jQuery object whose model is changed:
{{{
    listener({name: "name", old: oldvalue, new: newvalue}, callback);
}}}
