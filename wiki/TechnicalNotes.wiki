#summary Technical notes about Shuffl design

= Introduction =

This page is a collection of technical notes and rationale affecting the design choices made in implementing Shuffl.


= Cards, collections and workspaces =

The key underlying concept in Shuffl is a "card", which is roughly analogous to a physical record card.  In its simplest form, a card may contain free-form text notes, with some minimal additional structure: identifier, type, title, tags and content.  Different types of card may be associated with different display characteristics, e.g. colour, size, shape, etc.  The different types may also indicate some additional structure (analogous to pre-printed cards for, say, contact details).  And, within such an extended structure, one card may refer (link) to other cards, building up to a network of information. Card content is not limited to text:  it should be possible to include any web-displayable content in a card (e.g. images, videos, etc.)

Cards may be grouped into collections (or decks?).  Typically, such a collection would be an assembly of similar information (e.g. a stack of address cards), but such homogeneity within a collection is not a requirement.

Collections may also include sub-collections to arbitrary depth.  Inclusion of a card or collection in one collection does not preclude its inclusion in some other collection.

A workspace is a particular visual arrangement of cards and collections:  user interaction is via a workspace.


= Separation of data: content, styling and layout =

As far as possible, card content should be kept logically separate from styling and workspace layout.  The raw data for each card is made available as an addressable web resource.

Information about additional structures, or fields, within card data is associated with a card's type.  Such information does not necessarily constrain the content of any card: there is no enforcement of structural validity, rather this information is intended mainly to guide user interface generation.

Data about inclusion of cards in collections is kept logically separate, so that a separate store or system may be used to define different collections over the same cards.

Data about workspace layout is kept separately from the card and collection data, so that different workspaces may be created for different views over the card and collection  data.  Layout and styling information is also kept separately, and is associated with card types by the workspace data.  Thus different workspaces may select different styling, e.g., suitable for different kinds of display device.

Thus we derive the following logical data elements:
 * Structure descriptions, keyed by type identifier
 * Card data, keyed by card identifier and linked to structures by a type attribute
 * Collection data, linking to cards and other collections, having a collection type, and keyed by a collection identifier
 * Card and collection visual layout and styling information, keyed by layout/style identifiers
 * Workspace description, referencing card data, collection data. containing positioning information and mapping type identiers to layout/style identifiers.


= Card view types / render modes =

Each card may appear in a number of different ways in a workspace:

 * 1-line summary (Title, etc.) and/or icon
 * Full content display
 * Editing display (but see also: http://www.appelsiini.net/projects/jeditable)
 * "Stock" card: icon dragged to main workspace to create a new card

Styling information will be required for each of these.


= Tagging, namespaces and ontologies =

 * informal tags: bare names, syntactic only, but may form groups, clouds, trees, etc.  (SKOS?)
 * local semantics: prefixed tags, assigned default local namespace URI based on serving data store
 * global semantics: prefixed tags with defined PREFIX URI declaration to use global namespace


= Plugins for front end and back end =

Areas where functionality should be devolved to replaceable plug-in components

 * back-end storage (using AtomPub goes some way to achieving this, but we may need to be able to support different implementations such as Google data APIs, etc.)
 * card types and styles
 * embedable web content (images, widgets, etc...)
 * ...

How much of this can be provided by building to the jQuery plugin structure?  Hopefully, all of it.