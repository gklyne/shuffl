/**
 * @fileoverview
 *  Functions to support shuffl-card dragging and other animations
 *  
 * @author Graham Klyne
 * @version $Id: ...$
 */

// ----------------------------------------------------------------
// Globals and data
// ----------------------------------------------------------------

/**
 *  Add logging functions to global namespace, for convenience
 */
log = {};
log.debug = MochiKit.Logging.logDebug   ;
log.info  = MochiKit.Logging.log    ;
log.warn  = MochiKit.Logging.logWarning ;
log.error = MochiKit.Logging.logError   ;

// Hack as default is no limit and default firebug off
//MochiKit.Logging.logger.useNativeConsole = false;
//MochiKit.Logging.logger.maxSize = 2000;

/**
 * create shuffl namespace
 */
if (typeof shuffl == "undefined") {
    shuffl = {};
}

// ----------------------------------------------------------------
// Stockpile and card functions
// ----------------------------------------------------------------

/**
 * Draggable options for stockpiles
 */
shuffl.stockDraggable = { 
        opacity: 0.8, 
        revert: true, 
        revertDuration: 0, 
        stack: { group: '.shuffl-card', min: 10 } 
        }

/**
 * Draggable options for cards
 */
shuffl.cardDraggable = { 
        opacity: 0.5, 
        stack: { group: '.shuffl-card', min: 10 } 
        };

/**
 * Create a new card where a stock pile has been dropped
 */
shuffl.dropCard = function(frompile, tolayout, pos) {
    log.debug("shuffl.dropCard: "+shuffl.objectString(pos));
    // Create card using stockpile card factory
    var newcard = frompile.data('makeCard')(frompile);
    // make child of layout
    tolayout.append(newcard);
    // Locate card at drop point
    pos = shuffl.positionRelative(pos, tolayout);
    // TODO calulate this properly
    pos = shuffl.positionRel(pos, { left:9, top:9 });
    newcard.css(pos);
    // Make new card draggable
    newcard.draggable(shuffl.cardDraggable);
    // Place new card on top of cards
    shuffl.toFront(newcard);
    //newcard.css( 'z-index', frompile.css('z-index') );
    // Click brings card back to top
    newcard.click( function () { shuffl.toFront(jQuery(this)) });
    // TODO: Consider making card-sized drag
};

/**
 * Function attached to stockpile to liberate a new card from that pile
 */    
shuffl.createCardFromStock = function (stockpile) { 
    log.debug("makeCard "+stockpile);
    var cardclass = stockpile.attr("class")
        .replace(/shuffl-stockpile/,'')
        .replace(/ui-draggable/,'')
        .replace(/ui-draggable-dragging/,'')
        +' shuffl-card';
    //log.debug("  - cardclass: "+cardclass);
    return shuffl.makeCard('div', 'card_', cardclass, "(content)" );
};

/**
 * Creates a new card instance.
 * 
 * @param cardtag       element name for new card
 * @param cardidpref    local card identifier prefix - an autogenerated string is appeneded to
 *                      this to create a local name for the card, which in turn can be combined
 *                      with a base URI to form a URI for the card.
 * @param cardclass     CSS class names for the new card element
 * @param cardbody      string used in constructing the body of the card
 */
shuffl.makeCard = function (cardtag, cardidpref, cardclass, cardbody) {
    var card = jQuery("<"+cardtag+">"+cardbody+"</"+cardtag+">");
    card.attr('id', shuffl.makeId(cardidpref));
    card.addClass(cardclass);
    log.debug("makeCard: "+shuffl.elemString(card[0]));
    return card;
};

/**
 * Generate a new identifier string using a supplied prefix
 */
shuffl.idnext = 100;
shuffl.makeId = function(pref) {
    shuffl.idnext++;
    return pref+shuffl.idnext;
};

// ----------------------------------------------------------------
// Miscellaneous support functions
// ----------------------------------------------------------------

/**
 * Get string value representing a supplied element
 */
shuffl.elemString = function(elem) {
    var attrs = elem.attributes;
    var attrtext = "";
    for ( var i = 0 ; i < attrs.length ; i++ ) {
        // log.debug("  - @"+attrs[i].name+": "+attrs[i].value);
        attrtext += " "+attrs[i].name+"='"+attrs[i].value+"'";
    };
    var tagName = elem.tagName;
    return "<"+tagName+attrtext+">"
        +elem.innerHTML
        +"</"+tagName+">";
};

/**
 * Get string value for object attributes
 */
shuffl.objectString = function (obj) {
    var str = "";
    var pre = "";
    for ( var k in obj ) {
        if ( typeof obj[k] != "function" ) {
            //log.debug("  - "+k+": "+obj[k]);
            str += pre + k + ': ' + obj[k];
            pre = ', ';
        }
    };
    return "{ "+str+" };"
}

/**
 * Calculate supplied absolute position as offset from supplied object
 */
shuffl.positionRelative = function (pos, obj) {
    var base = obj.position();
    //log.debug("positionRelative: pos  "+pos.left+", "+pos.top);
    //log.debug("positionRelative: base "+base.left+", "+base.top);
    return shuffl.positionRel(pos, base);
}

/**
 * Calculate absolute position supplied as offset from object
 */
shuffl.positionAbsolute = function (off, obj) {
    var base = obj.position();
    //log.debug("positionAbsolute: off  "+off.left+", "+off.top);
    //log.debug("positionAbsolute: base "+base.left+", "+base.top);
    return shuffl.positionAbs(base, off);
}

/**
 * Calculate supplied absolute position as offset from supplied object
 */
shuffl.positionRel = function (pos, base) {
    return { left: pos.left-base.left, top: pos.top-base.top };
}

/**
 * Calculate absolute position from supplied base and offset
 */
shuffl.positionAbs = function (base, off) {
    return { left: base.left+off.left, top: base.top+off.top };
}

/**
 * Move indicated element to front in its draggable group
 * 
 * Code adapted from jQuery
 */
shuffl.toFront = function (elem) {
    var opts = elem.data("draggable").options;
    var group = jQuery.makeArray(jQuery(opts.stack.group)).sort(function(a,b) {
            return (parseInt(jQuery(a).css("zIndex"),10) || opts.stack.min) - 
                   (parseInt(jQuery(b).css("zIndex"),10) || opts.stack.min);
        });
    jQuery(group).each(function(i) {
            this.style.zIndex = opts.stack.min + i;
        });
    elem[0].style.zIndex = opts.stack.min + group.length;
};

/**
 * Resize main shuffl spaces to fit current window
 */    
shuffl.resize = function() {
    log.debug("Resize workspace");
    var ws = jQuery("#workspace"); 
    var lo = jQuery("#layout"); 
    var sb = jQuery("#stockbar");
    // Adjust height of layout area
    var ws    = lo.parent();
    var wpos  = ws.position();            // parent pos
    var wpadl = ws.css('padding-left');   // parent left padding
    var wpadt = ws.css('padding-top');    // parent top padding
    var spos  = sb.position();            // stockbar pos
    var lpos  = lo.position();            // layout pos
    var lpadl = lo.css('padding-left');
    var lpadt = lo.css('padding-top');
    var lmarl = lo.css('margin-left');
    var lmart = lo.css('margin-top');
    log.debug('wpos '+shuffl.objectString(wpos));
    log.debug('wpad left '+wpadl+", top "+wpadt);
    log.debug('spos '+shuffl.objectString(spos));
    log.debug('lpos '+shuffl.objectString(lpos));
    log.debug('lpad left '+lpadl+", top "+lpadt);
    log.debug('lmar left '+lmarl+", top "+lmart);
    var sheight = sb.outerHeight()
    var fheight = jQuery("#footer").outerHeight()
    var vmargin = parseInt(lo.css('margin-bottom'), 10);
    lo.height(lo.parent().innerHeight() - sheight - vmargin*4 - fheight);
};

// ----------------------------------------------------------------
// Load up workspace
// ----------------------------------------------------------------

shuffl.loadWorkspace = function(uri) {

    log.warn("TODO: load workspace from "+uri);

}

// ----------------------------------------------------------------
// Start-up logic
// ----------------------------------------------------------------

jQuery(document).ready(function(){

    log.info("shuffl starting");
       
    /**
     * Attach card-creation functions to stockpile cards
     */    

    log.debug("shuffl: attach card-creation functions to stockpile (TODO: allow function selection by stockpile definition)");

    jQuery("div.shuffl-stockpile").data( 'makeCard', shuffl.createCardFromStock );

    /**
     * Size workspace to fit within window (by default, it doesn't on Safari)
     */
    log.debug("shuffl: attach window resize handler)");
    jQuery(window).resize( shuffl.resize );
    shuffl.resize();

    /**
     * Connect up drag and drop for creating and moving cards
     */
    log.debug("shuffl: connect drag-and-drop logic");

    jQuery("div.shuffl-stockpile").draggable(shuffl.stockDraggable);
    jQuery("div.shuffl-card").draggable(shuffl.cardDraggable);
    jQuery("div.shuffl-card").click( function () { shuffl.toFront(jQuery(this)) } );

    jQuery("#layout").droppable({
        accept: "div.shuffl-stockpile",
        drop: 
            function(event, ui) {
                /**
                 * ui.draggable - current draggable element, a jQuery object.
                 * ui.helper - current draggable helper, a jQuery object
                 * ui.position - current position of the draggable helper { top: , left: }
                 * ui.offset - current absolute position of the draggable helper { top: , left: }
                 */
                log.debug("shuffl: drop "+ui.draggable);
                shuffl.dropCard(ui.draggable, jQuery(this), ui.offset);
            }
        });

    /**
     * TODO: connect up logic for editing cards
     */
    
    log.debug("shuffl TODO: connect content editing logic");
    
    /**
     * TODO: connect up logic for saving changes to backend store
     */
    
    log.debug("shuffl TODO: connect content save logic");
    
    /**
     * Initialization is done - now it's all event-driven
     */

    /**
     * Creeate a pop-up context menu
     */    
    log.debug("shuffl connect connect context menu");

    jQuery('span.shuffl-workspacemenu').contextMenu('workspacemenuoptions', {
        menuStyle: {
            'class': 'shuffl-contextmenu',
            'font-weight': 'bold',
            'background-color': '#DDDDDD',
            'border': 'thin #666666 solid'
            },
        showOnClick: true,
        bindings: {
            'open': function(t) {
                  log.info('Trigger was '+t.id+'\nAction was Open');
                },
            'save': function(t) {
                  log.info('Trigger was '+t.id+'\nAction was Save');
                },
          }
      });

      jQuery('#demo2').contextMenu('myMenu2', {
        menuStyle: {
          border: '2px solid #000'
        },
        itemStyle : {
          fontFamily: 'verdana',
          backgroundColor: '#666',
          color: 'white',
          border: 'none',
          padding: '1px'
        },
        itemHoverStyle: {
          color: '#fff',
          backgroundColor: '#0f0',
          border: 'none'
        }
      });
    
    log.info("shuffl initialization done");

    });

// End.
